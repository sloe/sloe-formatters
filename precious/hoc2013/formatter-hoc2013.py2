#!/usr/bin/env python

from collections import defaultdict
import csv
import os
import logging
from pprint import pprint, pformat
import re
import subprocess
import sys


class App:
    def __init__(self, script_dir):
        self.params = {}
        self.script_dir = script_dir

    def get_results_filepath(self):
        results_dir = self.params.get("results_filepath", self.script_dir)
        return os.path.join(results_dir, self.params["results_leafname"])

    def get_template_filepath(self):
        results_dir = self.params.get("template_filepath", self.script_dir)
        return os.path.join(results_dir, self.params["template_leafname"])

    def get_mapping_filepath(self):
        results_dir = self.params.get("mapping_filepath", self.script_dir)
        return os.path.join(results_dir, self.params["mapping_leafname"])

    def get_capture_filepath(self, leafpath):
        results_dir = self.params["capture_dir"]
        return os.path.normpath(os.path.join(results_dir, leafpath))

    def get_primary_filepath(self, leafpath):
        results_dir = self.params["primary_dir"]
        return os.path.normpath(os.path.join(results_dir, leafpath))

    def convert_time(self, value):
        match = re.match(r"([0-5][0-9]):([0-5][0-9]):([0-5][0-9])", value)
        if not match:
            raise Exception("Cannot convert time %s" % value)
        return 3600 * int(match.group(1)) + 60 * int(match.group(2)) + int(match.group(3))

    def parse_csv(self):
        self.entries = {}
        self.categories = defaultdict(dict)
        with open(self.get_results_filepath(), 'rb') as csvfile:
            dialect = csv.Sniffer().sniff(csvfile.read(1024), ',')
            csvfile.seek(0)
            fieldnames = (
                "number",
                "type",
                "name",
                "class",
                "start_time",
                "end_time",
                "raw_time",
                "category",
                "adj_time",
                "adj",
                "winner"
            )

            csvreader = csv.DictReader(csvfile, dialect=dialect, fieldnames=fieldnames)
            for item in csvreader:
                if not re.match(r"[0-9]+$", item["number"]):
                    logging.warning("Ignoring CSV line %s" % pformat(item))
                elif item["adj_time"] == "":
                    logging.warning("Skipping untimed crew %s" % pformat(item))
                else:
                    number = int(item["number"])
                    if number in self.entries:
                        raise Exception("Duplicate crew number %s" % number)
                    item["number"] = int(item["number"])
                    for key in ("start_time", "end_time", "raw_time", "adj_time", "adj"):
                        if item[key] != "":
                            item[key] = self.convert_time(item[key])

                    self.entries[number] = item

                    self.categories[item["category"]][number] = item
                    if item["raw_time"] != item["end_time"]  - item["start_time"]:
                        logging.error("Time calculation error %s" % pformat(item))
                    if not ("%s %s" % (item["type"], item["class"])).startswith(item["category"]):
                        logging.error("Category error %s" % pformat(item))
        logging.info("Categories: %s" % (", ".join(sorted(self.categories.keys()))))
        self.category_order = {}
        for category, items in self.categories.iteritems():

            sorted_category = sorted(items.keys(), key = lambda x: self.entries[x]["adj_time"])

            self.category_order[category] = sorted_category

        for number, item in self.entries.iteritems():
            category = self.category_order[item["category"]]
            item["position"] = 1 + category.index(int(item["number"]))

            item["num_entries"] = len(category)

        for key, order in self.category_order.iteritems():
            for index in range(0, len(order) - 1):
                entry1 = self.entries[order[index]]
                entry2 = self.entries[order[index+1]]

                if entry1["adj_time"] > entry2["adj_time"]:
                    raise Exception("Category sorting fault %s > %s (order %s)" %
                        (pformat(entry1), pformat(entry2), ", ".join([str(x) for x in order])))


    def generate_template(self):
        content = ""
        for number in sorted(self.entries.keys()):
            item = self.entries[number]
            title = '%d "%s %s" "%s" "%s" %d of %d' % (number, item["type"], item["class"], item["category"], item["name"], item["position"], item["num_entries"])
            if item["number"] < 400:
                template = "card1/00.MTS"
            else:
                template = "card2/00.MTS"

            content += "%s = %s\r\n" % (template, title)

        return content


    def get_dest_filename(self, number):
        item = self.entries[number]
        name = item["name"]
        name = re.sub(r"[^0-9A-Za-z +']", " ", name)
        return "%d %s %s %s, %d of %d.mp4" % (number, name, item["class"], item["type"], item["position"], item["num_entries"])


    def generate_primary(self):
        self.mappings = []
        with open(self.get_mapping_filepath(), 'rb') as mappingfile:
            for line in mappingfile:
                if not line.startswith("#"):
                    match = re.match(r"([0-9A-Za-z./_]+) = (\d+) ", line)
                    if not match:
                        match = re.match(r'([0-9A-Za-z./_]+) = "([^"]+)"', line)
                    if not match:
                        logging.error("Undecodable mapping %s" % line)
                    else:
                        filepath = self.get_capture_filepath(match.group(1))
                        if not os.path.exists(filepath):
                            logging.error("Missing file in mapping %s" % filepath)
                        else:
                            if re.match(r"\d+$", match.group(2)):
                                dest_filename =  self.get_dest_filename(int(match.group(2)))
                            else:
                                dest_filename = match.group(2) + ".mp4"
                            self.mappings += [{
                                "filepath": filepath,
                                "dest_filename": dest_filename
                            }]

        for mapping in self.mappings:
            dest_filepath = self.get_primary_filepath(mapping["dest_filename"])
            print "%s -> %s" % (mapping["filepath"], dest_filepath)
            if not os.path.isfile(dest_filepath):
                subprocess.check_call([
                    self.params["ffmpeg_path"],
                    "-y",
                    "-i", mapping["filepath"],
                    "-an",
                    dest_filepath + ".yuv"
                ])
                subprocess.check_call([
                    self.params["ffmpeg_path"],
                    "-y",
                    "-s", "1920x1080",
                    "-r", str(self.params["output_fps"]),
                    "-i", dest_filepath + ".yuv",
                    "-an",
                    "-vcodec", "libx264",
                    "-preset", "medium",
                    "-b:v", self.params["output_bitrate"],
                    "-pix_fmt", "yuv420p",
                    "-tune", "film",
                    dest_filepath
                ])

                os.remove(dest_filepath + ".yuv")

    def execute(self):
        self.parse_csv()
        with open(self.get_template_filepath(), 'wb') as template_file:
            template_file.write(self.generate_template())
        if not os.path.exists(self.get_mapping_filepath()):
            logging.info("Not generating primary footage because mapping file missing (%s)" % self.get_mapping_filepath())
        else:
            self.generate_primary()

if __name__ == "__main__":
    logging.getLogger().setLevel(logging.INFO)
    script_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
    app = App(script_dir)
    app.params = {
        "ffmpeg_path": os.path.normpath(os.path.join(script_dir, "../../../sloe-winbin/ffmpeg/bin/ffmpeg.exe")),
        "results_leafname": "results-hoc2013.csv",
        "template_leafname": "template-hoc2013.txt",
        "mapping_leafname": "mapping-hoc2013.txt",
        "capture_dir": os.path.normpath(os.path.join(script_dir, "../../../capture/precious/hoc2013")),
        "primary_dir": os.path.normpath(os.path.join(script_dir, "../../../primary/derived/hoc2013")),
        "output_fps": 120,
        "output_bitrate": "100000k"

    }
    app.params.update({
        "mapping_leafname": "extras-hoc2013.txt",
        "primary_dir": os.path.normpath(os.path.join(script_dir, "../../../primary/derived/hoc2013/extras")),
        "output_fps": 240,
        "output_bitrate": "200000k"
    })

    app.execute()




    print "Done."
