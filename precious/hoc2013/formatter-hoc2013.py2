#!/usr/bin/env python

from collections import defaultdict
import csv
import os
import logging
from pprint import pprint, pformat
import re
import sys


class App:
    def __init__(self, script_dir):
        self.params = {}
        self.script_dir = script_dir

    def get_results_filepath(self):
        results_dir = self.params.get("results_filepath", self.script_dir)
        return os.path.join(results_dir, self.params["results_leafname"])

    def get_template_filepath(self):
        results_dir = self.params.get("template_filepath", self.script_dir)
        return os.path.join(results_dir, self.params["template_leafname"])

    def convert_time(self, value):
        match = re.match(r"([0-5][0-9]):([0-5][0-9]):([0-5][0-9])", value)
        if not match:
            raise Exception("Cannot convert time %s" % value)
        return 3600 * int(match.group(1)) + 60 * int(match.group(2)) + int(match.group(3))

    def parse_csv(self):
        self.entries = {}
        self.categories = defaultdict(dict)
        with open(self.get_results_filepath(), 'rb') as csvfile:
            dialect = csv.Sniffer().sniff(csvfile.read(1024), ',')
            csvfile.seek(0)
            fieldnames = (
                "number",
                "type",
                "name",
                "class",
                "start_time",
                "end_time",
                "raw_time",
                "category",
                "adj_time",
                "adj",
                "winner"
            )

            csvreader = csv.DictReader(csvfile, dialect=dialect, fieldnames=fieldnames)
            for item in csvreader:
                if not re.match(r"[0-9]+$", item["number"]):
                    logging.warning("Ignoring CSV line %s" % pformat(item))
                else:
                    number = int(item["number"])
                    if number in self.entries:
                        raise Exception("Duplicate crew number %s" % number)
                    item["number"] = int(item["number"])
                    for key in ("start_time", "end_time", "raw_time", "adj_time", "adj"):
                        if item[key] != "":
                            item[key] = self.convert_time(item[key])

                    self.entries[number] = item

                    self.categories[item["category"]][number] = item
                    if item["raw_time"] != item["end_time"]  - item["start_time"]:
                        logging.error("Time calculation error %s" % pformat(item))
                    if not ("%s %s" % (item["type"], item["class"])).startswith(item["category"]):
                        logging.error("Category error %s" % pformat(item))
        logging.info("Categories: %s" % (", ".join(sorted(self.categories.keys()))))
        self.category_order = {}
        for category, items in self.categories.iteritems():

            sorted_category = sorted(items.keys(), key = lambda x: self.entries[x]["adj_time"])

            self.category_order[category] = sorted_category

        for number, item in self.entries.iteritems():
            category = self.category_order[item["category"]]
            item["position"] = 1 + category.index(int(item["number"]))

            item["num_entries"] = len(category)

        for key, order in self.category_order.iteritems():
            for index in range(0, len(order) - 1):
                entry1 = self.entries[order[index]]
                entry2 = self.entries[order[index+1]]

                if entry1["adj_time"] > entry2["adj_time"]:
                    raise Exception("Category sorting fault %s > %s (order %s)" %
                        (pformat(entry1), pformat(entry2), ", ".join([str(x) for x in order])))


    def generate_template(self):
        content = ""
        for number in sorted(self.entries.keys()):
            item = self.entries[number]
            title = '%d "%s %s" "%s" "%s" %d of %d' % (number, item["type"], item["class"], item["category"], item["name"], item["position"], item["num_entries"])
            content += " = %s\r\n" % title

        return content


    def execute(self):
        self.parse_csv()
        with open(self.get_template_filepath(), 'wb') as template_file:
            template_file.write(self.generate_template())


if __name__ == "__main__":
    logging.getLogger().setLevel(logging.INFO)
    script_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
    app = App(script_dir)
    app.params = {
        "results_leafname": "results-hoc2013.csv",
        "template_leafname": "template-hoc2013.txt"
    }
    app.execute()
    print "Done."
